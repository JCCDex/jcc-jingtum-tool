#!/usr/bin/env node

const program = require("commander");
const fs = require("fs");
const BigNumber = require("bignumber.js");
const JingchangWallet = require('jcc_wallet').JingchangWallet
const jtWallet = require('jcc_wallet').jtWallet
var readlineSync = require("readline-sync");
const { convertStringToHex, convertHexToString } = require("@swtc/common");
const { createCipheriv } = require("crypto");
const Remote = require("@swtc/rpc").Remote;
const Transaction = require("@swtc/transaction").Transaction

function getBaseHome() {
  return (process.env.HOME || process.env.USERPROFILE) + "/.jcc-jingtum-tool";
}

program.version("0.0.1");
program.usage("--help", "Show jingtum-tools help");

let _description = "SWTC command line tools";
program.description(_description);

program.option("--config <config file>", "specified config file, defaut is " + getBaseHome() + "/config.json");

program.option("--wallet_create", "Create new SWTC wallet");
program.option("--save_wallet", "save wallet to keystore file when create");
program.option("--import_private_to_keystore", "import private key to keystore file");
program.option("--keystore <keystore file>", "keystore file path");
program.option("--password <keystore file password>", "keystore password");
program.option("--show_secret", "show account secret");

program.option("--server <SWTC node address>", "node rpc address");

program.option("--balance <Wallet address>", "get balance of address");
program.option("--server_info", "get rpc node info");
program.option("--account_info <Wallet address>", "get account info");

program.option("--ledger <ledger type or number>", "get ledger info by number or validated,closed,current");
program.option("--transaction <hash>", "get transaction by hash");

program.option("--transfer <Destination address>", "destination address, source address specified by keystore or config");
program.option("--memo <string>", "memo pass by transaction");
program.option("--token <string>", "token name, default is SWT");
program.option("--issuer <string>", "issuer account, default is empty");
program.option("--amount <amount>", "transfer amount");
program.option("--seq <number>", "specified sequence");
program.option("--getSeq <account>", "get current sequence");

// order related
program.option("--getOrders <account>", "get orders of account");
program.option("--createOrder <parameters>", "create order, parameters like: taker gets value/taker gets currency/issuer/taker pays value/taker pays currency/issuer");
program.option("--cancelOrder <offer sequence>", "cancel order by seq");

// relation related
program.option("--getLimit <account>", "get token limit of account");
program.option("--setLimit <parameters>", "set token limit of account, parameters like value/currency/issuer");

// blacklist related 
program.option("--blackList <account>", "query account in blacklist or not");
// program.option("--setBlackList <account>", "add account to blacklist");
// program.option("--removeBlackList <account>", "remove account from blacklist");

// token issue related

// nft related

program.option("--multi_create <weight and account list>", "Create multisign wallet, like '2,accout,1,account,1'");
program.option("--get_multi <account>", "get multi signer in account");
program.option("--sign_for <string>", "sign for account by multi-sign");
program.option("--multi_sign <true>", "multi sign flag");
program.option("--save_sign <filename>", "save signed content for multi sign");

// 读取签名并提交
program.option("--multi_sign_commit <signers file path>", "multi sign commit, signed tx file parameters like 'signer1 file, signer2 file'");

// 禁止和激活密钥
program.option("--disable_secret", "disable secret");
program.option("--enable_secret", "enable secret");


program.option("--guess <string>", "format: s/a,b/Axu/c,b/ secret size is 29");

program.parse(process.argv);

async function createWallet() {
  let password = "";
  if (program.save_wallet) {
    password = readlineSync.question("Password:", { hideEchoBack: true });
  }
  let jc = await JingchangWallet.generate(password);
  if (!program.save_wallet) {
    let inst = new JingchangWallet(jc);
    let wallet = { address: await inst.getAddress(), secret: await inst.getSecretWithType(password) };
    console.log(JSON.stringify(wallet, null, 2));
    return;
  }
  fs.writeFileSync(jc.wallets[0].address, JSON.stringify(jc, null, 2), "utf-8");
}
if (program.wallet_create) {
  createWallet();
  return;
}

async function importPrivateToKeystore() {
  var secret = readlineSync.question("SWTC wallet secret:", { hideEchoBack: true });

  if (!jtWallet.isValidSecret(secret)) {
    console.log("secret invalid, abort.");
    return;
  }
  var password = readlineSync.question("Password:", { hideEchoBack: true });
  var getAddress = jtWallet.getAddress;

  let jc = await JingchangWallet.generate(password);
  let inst = new JingchangWallet(jc, true, true);
  await inst.importSecret(secret, password, "swt", getAddress);
  let address = getAddress(secret);
  await inst.removeWalletWithType();

  fs.writeFileSync(inst._jingchangWallet.wallets[0].address, JSON.stringify(inst._jingchangWallet, null, 2), "utf-8");
  console.log("\n", inst._jingchangWallet.wallets[0].address, "saved");

  return;
}
if (program.import_private_to_keystore) {
  importPrivateToKeystore();
  return;
}

// 获取配置文件
let _config = program.config;
let _options = {};

// 如果文件位置没有通过参数传递
if (!!!_config) {
  _config = getBaseHome() + "/config.json";
}
if (_config.indexOf("/") == -1 && _config.indexOf("\\") == -1) {
  if (_config.indexOf("json") == -1) {
    _config = getBaseHome() + "/config." + _config + ".json";
  }
}
if (!fs.existsSync(_config)) {
  console.log("can not get", _config, "file, create it manula!");
  process.exit();
}

// 读取文件
try {
  _options = Object.assign(_options, JSON.parse(fs.readFileSync(_config, "utf-8")));
} catch (e) {
  console.log("Parse config file fail, check and correct it", e);
  process.exit();
}

if (!!program.server) {
  _options.server = program.server;
}

async function getWalletFromKeystoreFile(_file, _password) {
  if (fs.existsSync(_file)) {
    try {
      var ks = JSON.parse(fs.readFileSync(_file, "utf-8"));
      var password;
      if (!_password) {
        password = readlineSync.question("Password:", { hideEchoBack: true });
      } else {
        password = _password;
      }
      
      let inst = new JingchangWallet(ks);
      let w = { address: await inst.getAddress(), secret: await inst.getSecretWithType(password) };
      return w;
    } catch (e) {
      console.log("Parse keystore file fail, check and correct it", e);
      process.exit();
    }
  } else {
    console.log("Can not find", _file, "abort!");
    process.exit();
  }
}

async function getWalletFromKeystore() {
  if (!program.keystore) {
    return;
  }
  let keystorePath = program.keystore;
  // 兼容windows下的路径
  if (keystorePath.indexOf("/") == -1 && keystorePath.indexOf("\\") == -1) {
    keystorePath = getBaseHome() + "/" + keystorePath;
  }

  _options.wallet = Object.assign(_options.wallet, await getWalletFromKeystoreFile(keystorePath, program.password));
}

function generateTries(items, content, itemIdx) {
  let res = "";
  if (itemIdx < items.length - 1) {
    if (!Array.isArray(items[itemIdx])) {
      res = generateTries(items, content + items[itemIdx], itemIdx + 1);
      if (res !== "") {
        return res;
      }
    } else {
      for (var i = 0; i < items[itemIdx].length; i++) {
        res = generateTries(items, content + items[itemIdx][i], itemIdx + 1);
        if (res !== "") {
          return res;
        }
      }
    }
    return "";
  }

  // 最后输出
  if (!Array.isArray(items[itemIdx])) {
    if (jtWallet.isValidSecret(content + items[itemIdx])) {
      return (content + items[itemIdx]);
    }
  } else {
    for (var i = 0; i < items[itemIdx].length; i++) {
      if (jtWallet.isValidSecret(content + items[itemIdx][i])) {
        return (content + items[itemIdx][i]);
      }
    }
  }
  return "";
}

if (program.guess) {
  let items = program.guess.split('/');
  if (items.length < 3) {
    console.log(items.join(''), ", well, nothing to do");
    return;
  }

  var tries = 1;
  for (var i = 0; i < items.length; i++) {
    if (items[i].indexOf(',') == -1) {
      continue;
    }
    items[i] = items[i].split(',');
    tries = tries * items[i].length;
  }

  console.log('tries:', tries, 'file size:', (30 * tries / 1024) + 'k');
  if (tries > 10000000) {
    console.log('Too many tries, abort');
    return;
  }
  let res = generateTries(items, "", 0);
  if (res) {
    console.log("Got it!", res);
  } else {
    console.log("Well, Got nothing.")
  }
}

async function getBalance() {
  let balance = await getRemote().getAccountBalances(program.balance);
  if (!balance.balances) {
    console.log("get", program.balance, "fail! something wrong unknown");
    return;
  }
  balance.balances.forEach(token => {
    console.log(JSON.stringify(token, null, 2));
  });
  console.log("account sequence:", balance.sequence);
}

function getAmount(obj) {
  if (typeof obj === "string") {
    return {currency: "SWT", value: BigNumber(obj).dividedBy(1000000), issuer: ""};
  }
  return {currency: obj.currency, value: obj.value, issuer: obj.issuer};  
}

async function getOrders(account) {
  let ret = await getRemote().getAccountOffers(account, {limit: 400});

  console.log("get", ret.offers.length);
  for (var i = 0; i < ret.offers.length; i++) {
    let offer = ret.offers[i];
    offer.taker_gets = getAmount(offer.taker_gets);
    offer.taker_pays = getAmount(offer.taker_pays);
    
    console.log("seq:", offer.seq, 
      offer.taker_gets.value + offer.taker_gets.currency + " --> " + offer.taker_pays.value + offer.taker_pays.currency,
      "price:",
      BigNumber(offer.taker_gets.value).dividedBy(BigNumber(offer.taker_pays.value)) + " " + offer.taker_gets.currency + "/" + offer.taker_pays.currency,
      );
  }
}

async function getLimit(account) {
  try {
    let ret = await getRemote().getAccountTrusts(account, {type: "trust"});
    console.log(ret);
    // ret = await getRemote().getAccountCurrencies(account);
    // console.log(ret);
  }catch(err){
    console.log("Error:", err);
  }
}

async function blackList(account) {
  try {
    let ret = await getRemote().getBlacklistInfo({account: account});
    console.log(ret);
  }catch(err){
    console.log("Error:", err);
  }
}

async function getServerInfo() {
  let info = await getRemote().rpcServerInfo();
  console.log(JSON.stringify(info, null, 2));
}

async function getAccountInfo(account) {
  let info = await getRemote().getAccountInfo(account);
  console.log(JSON.stringify(info, null, 2));
}

async function getLedger(ledger) {
  if (!isNaN(ledger)) {
    ledger = Number(ledger);
  }
  let info = await getRemote().rpcLedger({ ledger_index: ledger });
  console.log("ledger:", JSON.stringify(info, null, 2));
}

async function getTransaction(hash) {
  try {
    let info = await getRemote().rpcTx({transaction: hash});
    console.log("transaction:", JSON.stringify(info, null, 2));
  }catch(e) {
    console.log(e);
  }
}

async function getAccountSequence(account) {
  try {
    let ret = -1;
    if (program.seq === undefined) {
      ret = await getRemote().getAccountSequence(account);
    }else{
      ret = program.seq;
    }
    return ret;
  }catch(e) {
    console.log(e);
  }
}

function emptyCallback(...args) {
  return;
}

async function rpcSubmit(tx) {
  try{
    let ret = await getRemote().rpcSubmit({tx_blob: tx.tx_json.blob});
    if (ret.engine_result === "tesSUCCESS") {
      console.log("hash:", ret.tx_json.hash);
    }else{
      console.log(ret);
    }
  }catch(e){
    console.log(e);
  }
}

async function _buildMultiSign(tx) {
  let seq = await getAccountSequence(program.sign_for);
  tx.setSequence(seq);
  let signed  = Transaction.buildSignFirstTx({tx: tx, secret: _options.wallet.secret, address: _options.wallet.address});
  console.log(JSON.stringify(signed, null, 2));

  if (!!program.save_sign) {
    try {
      fs.writeFileSync(program.save_sign, JSON.stringify(signed.tx_json, null, 0));
      console.log("multi signed by", _options.wallet.address, "is saved to", program.save_sign);
    } catch (e) {
      console.log("save file fail!", e);
      process.exit();
    }
  }
}

async function getTransferTx(_source, _dest, _token, _issuer, _amount, _memo) {
  await getWalletFromKeystore();
  let amount = _token === "SWT" ? {value: _amount, currency: 'SWT', issuer: ''} : {value: _amount, currency: _token, issuer: _issuer === "" ? "jGa9J9TkqtBcUoHe2zqhVFFbgUVED6o9or" : _issuer}
  let tx = Transaction.buildPaymentTx({source: _source, to: _dest, amount: amount});
  tx.addMemo(_memo);
  tx.setFee(10);

  return tx;
}

async function transfer_multi_sign(_dest, _token, _issuer, _amount, _memo) {
  let tx = await getTransferTx(program.sign_for, _dest, _token, _issuer, _amount, _memo);
  await _buildMultiSign(tx);
}

async function transfer(_dest, _token, _issuer, _amount, _memo) {
  let tx = await getTransferTx(_options.wallet.address, _dest, _token, _issuer, _amount, _memo);
  tx.setSecret(_options.wallet.secret);

  let seq = await getAccountSequence(_options.wallet.address);
  tx.setSequence(seq);
  tx.sign(emptyCallback);

  await rpcSubmit(tx);
}

async function getCreateOrderTx(account, taker_gets, taker_pays, memo) {
  const tx = Transaction.buildOfferCreateTx({
    type: "Sell",
    account: account,
    platform: "jHbpNVU8sqCmBR5UawKvCQMpEJfFhqUvJ5",
    taker_gets: taker_gets,
    taker_pays: taker_pays
  });

  tx.addMemo(memo);
  tx.setFee(10);

  return tx;
}

async function createOrder_multi_sign(taker_gets, taker_pays, memo) {
  await getWalletFromKeystore();
  let tx = await getCreateOrderTx(program.sign_for, taker_gets, taker_pays, memo);
  await _buildMultiSign(tx);
}

async function createOrder(taker_gets, taker_pays, memo) {
  await getWalletFromKeystore();
  let tx = await getCreateOrderTx(_options.wallet.address, taker_gets, taker_pays, memo);
  tx.setSecret(_options.wallet.secret);

  let seq = await getAccountSequence(_options.wallet.address);
  tx.setSequence(seq);
  tx.sign(emptyCallback);

  await rpcSubmit(tx);
}

async function getCancelOrderTx(account, offerSeq, memo) {
  const tx = Transaction.buildOfferCancelTx({
    account: account,
    sequence: offerSeq
  });

  tx.addMemo(memo);
  tx.setFee(10);

  return tx;
}

async function cancelOrder_multi_sign(offerSeq, memo) {
  await getWalletFromKeystore();
  let tx = await getCancelOrderTx(program.sign_for, offerSeq, memo);
  await _buildMultiSign(tx);
}

async function cancelOrder(offerSeq, memo) {
  await getWalletFromKeystore();
  let tx = await getCancelOrderTx(_options.wallet.address, offerSeq, memo);
  tx.setSecret(_options.wallet.secret);

  let seq = await getAccountSequence(_options.wallet.address);
  tx.setSequence(seq);
  tx.sign(emptyCallback);

  await rpcSubmit(tx);
}

async function getBuildRelationTx(account, currency, issuer, value) {
  const tx = Transaction.buildRelationTx({
    type: "trust",
    account: account,
    limit: {
      currency: currency,
      issuer: issuer,
      value: value
    }
  });

  tx.addMemo(memo);
  tx.setFee(10);

  return tx;
}

async function buildRelation_multi_sign(currency, issuer, value) {
  await getWalletFromKeystore();
  let tx = await getBuildRelationTx(program.sign_for, currency, issuer, value);
  await _buildMultiSign(tx);
}

async function buildRelation(currency, issuer, value) {
  await getWalletFromKeystore();
  let tx = await getBuildRelationTx(_options.wallet.address, currency, issuer, value);
  tx.setSecret(_options.wallet.secret);

  let seq = await getAccountSequence(_options.wallet.address);
  tx.setSequence(seq);
  tx.sign(emptyCallback);

  await rpcSubmit(tx);
}

async function getSetBlackListTx(account) {
  const tx = Transaction.buildRelationTx({
    type: "trust",
    account: account,
    limit: {
      currency: currency,
      issuer: issuer,
      value: value
    }
  });

  tx.addMemo(memo);
  tx.setFee(10);

  return tx;
}

async function setBlackList_multi_sign(blackList) {
  await getWalletFromKeystore();
  let tx = await getSetBlackListTx(program.sign_for, currency, issuer, value);
  await _buildMultiSign(tx);
}

async function setBlackList(blackList) {
  await getWalletFromKeystore();
  let tx = await getSetBlackListTx(_options.wallet.address, currency, issuer, value);
  tx.setSecret(_options.wallet.secret);

  let seq = await getAccountSequence(_options.wallet.address);
  tx.setSequence(seq);
  tx.sign(emptyCallback);

  await rpcSubmit(tx);
}

async function getMultiSigner() {
  let ret = await getRemote().getAccountSignerList(program.get_multi);
  if (ret.account_objects !== null) {
    console.log("multi sign list:\n", ret.account_objects[0].SignerEntries);
    console.log("signer quorum:", ret.account_objects[0].SignerQuorum);
  }else{
    console.log(program.get_multi, "is not multi sign account.");    
  }
}

async function getCreateMultiSignTx(address) {
  let parameters = program.multi_create.split(',');

  if (isNaN(parameters[0])) {
    console.log("quorum must be number", parameters[0]);
    process.exit();
  }
  let quorum = Number(parameters[0]);
  if (quorum > 8) {
    console.log("quorum must be small than 8", quorum);
    process.exit();
  }

  if ((parameters.length <= 1 && quorum > 0) || (parameters.length - 1) % 2 > 0) {
    console.log("parameters count error");
    process.exit();
  }
  let weigths = [];
  for (var i = 1; i < parameters.length - 1; i++, i++) {
    weigths[(i - 1) / 2] = { account: parameters[i], weight: Number(parameters[i + 1]) };
  }
  let options = quorum ? {account: address, threshold: quorum, lists: weigths}:{account: address, threshold: quorum}
  let tx = Transaction.buildSignerListTx(options);
  tx.setFee(10);

  return tx;
}

async function createMultiSign_multi_sign() {
  await getWalletFromKeystore();
  let tx = await getCreateMultiSignTx(program.sign_for);

  // 检查是否是删除多签
  if (tx.tx_json.SignerQuorum === 0) {
    let info = await getRemote().getAccountInfo(program.sign_for);
    if (info.account_data.Flags !== 0) {
      console.log("enable account master key first!!!\n", info);
      return;
    }
  }

  await _buildMultiSign(tx);
}

async function createMultiSign() {
  await getWalletFromKeystore();
  let tx = await getCreateMultiSignTx(_options.wallet.address);
  tx.setSecret(_options.wallet.secret);

  let seq = await getAccountSequence(_options.wallet.address);
  tx.setSequence(seq);
  tx.sign(emptyCallback);

  console.log(tx);

  await rpcSubmit(tx);
}

const sleep = (milliseconds) => {
  return new Promise((resolve) => setTimeout(resolve, milliseconds));
};

async function showSecret() {
  await getWalletFromKeystore();
  console.log(_options.wallet);
  process.exit();
}

if (program.show_secret) {
  showSecret();
  return;
}

// 初始化连接
let remote = null;
function createRemote() {
  remote = new Remote({ server: _options.server });
}

function getRemote() {
  if (!remote) {
    createRemote();
  }
  return remote;
}

if (program.ledger) {
  getLedger(program.ledger);
  return;
}

if (program.transaction) {
  getTransaction(program.transaction);
  return;
}

if (program.server_info) {
  getServerInfo();
  return;
}

if (program.account_info) {
  getAccountInfo(program.account_info);
  return;
}

if (program.balance) {
  getBalance();
  return;
}

if (program.getOrders) {
  getOrders(program.getOrders);
  return;
}

if (program.getLimit) {
  getLimit(program.getLimit);
  return;
}

if (program.blackList) {
  blackList(program.blackList);
  return;
}

async function getSeq(account) {
  let seq = await getAccountSequence(account);
  console.log("account", account, "current sequence is", seq);
}

if (program.getSeq) {
  getSeq(program.getSeq);
  return;
}

var memo = "";
var token = "SWT";
var issuer = "";
if (program.memo) {
  memo = program.memo;
}
if (program.token) {
  token = program.token;
}
if (program.issuer) {
  issuer = program.issuer;
}

if (program.transfer) {
  var amount = Number(program.amount);

  if (isNaN(amount)) {
    console.log("amount is", program.amount, "invalid");
    process.exit();
  }

  if (!program.sign_for) {
    transfer(program.transfer, token, issuer, amount, memo);
  }else{
    transfer_multi_sign(program.transfer, token, issuer, amount, memo);
  }
  return;
}

function buildAmount(currency, value, issuer) {
  if (currency.toUpperCase() === "SWT") {
    return value;
  }else{
    return {currency: currency, value: value, issuer: issuer === "" ? "jGa9J9TkqtBcUoHe2zqhVFFbgUVED6o9or" : issuer}
  }
}

if (program.createOrder) {
  // parse amount
  let inputs = program.createOrder.split('/');
  let taker_gets = buildAmount(inputs[1], inputs[0], inputs[2]);
  let taker_pays = buildAmount(inputs[4], inputs[3], inputs[5]);

  if (!program.sign_for) {
    createOrder(taker_gets, taker_pays, memo);
  }else{
    createOrder_multi_sign(taker_gets, taker_pays, memo);
  }

  return;
}

if (program.cancelOrder) {
  if (!program.sign_for) {
    cancelOrder(program.cancelOrder, memo);
  }else{
    cancelOrder_multi_sign(program.cancelOrder, memo);
  }

  return;
}

if (program.setLimit) {
  // parse token info
  let inputs = program.setLimit.split('/');
  let token = buildAmount(inputs[1], inputs[0], inputs[2]);

  if (!program.sign_for) {
    buildRelation(token.currency, token.issuer, token.value);
  }else{
    buildRelation_multi_sign(token.currency, token.issuer, token.value);
  }

  return;
}

if (program.setBlackList) {

  if (!program.sign_for) {
    setBlackList(program.setBlackList);
  }else{
    setBlackList_multi_sign(program.setBlackList);
  }

  return;
}

// 比较多签的交易信息是否一致
function validTxs(txs) {
  if (txs.length < 2) return true;
  for (var i = 0; i < txs.length - 1; i++) {
    let a = JSON.stringify(txs[i]);
    let b = JSON.stringify(txs[i+1]);
    console.log("A:", a, "\nB:", b);
    if ( a !== b) return false;
  }

  return true;
}

if (program.multi_create) {
  if (!program.sign_for) {
    createMultiSign();
  }else{
    createMultiSign_multi_sign();
  }
  return;
}

if (program.get_multi) {
  getMultiSigner();
  return;
}

async function submitMultiSign(tx) {
  try {
    // 还原Fee
    if (tx.tx_json.Fee < 10) {
      tx.tx_json.Fee = tx.tx_json.Fee * 1000000;
    }
    // 还原SWT的数量表达
    if (!isNaN(Number(tx.tx_json.Amount))) {
      tx.tx_json.Amount = tx.tx_json.Amount * 1000000;
    }

    let ret = await getRemote().rpcSubmitMultisigned({tx_json: tx.tx_json});
    console.log(ret);  
  }catch(e){
    console.log(e);
  }
}

if (program.multi_sign_commit) {
  // 获取所有交易签名和交易
  let files = program.multi_sign_commit.split(',');
  let signers = [];
  let txs = [];
  for (var i = 0; i < files.length; i++) {
    try {
      txs[i] = JSON.parse(fs.readFileSync(files[i], "utf-8"));
      signers[i] = txs[i].Signers[0];
      delete txs[i].Signers;
    } catch (e) {
      console.log("Parse config file fail, check and correct it", e);
      process.exit();
    }
  }

  // 比较所有tx是否一致
  if (!validTxs(txs)) {
    console.log("multi signed tx not same:", JSON.stringify(txs, null, 2));
    return;
  }
  let tx_json = txs[0];
  tx_json.Signers = signers;
  let finalTx = Transaction.buildMultisignedTx(tx_json);
  
  submitMultiSign(finalTx);

  return;
}

async function buildAccountTx(account, disable) {
  let options = {}
  if (disable) {
    options = {account: account, type: 'property', set_flag: 4};
  }else{
    options = {account: account, type: 'property', clear_flag: 4};
  }
  let tx = Transaction.buildAccountSetTx(options);
  tx.setFee(10);

  return tx;
}

async function disableSecret(flag) {
  await getWalletFromKeystore();
  let account = flag ? _options.wallet.address : program.sign_for;
  let tx = await buildAccountTx(account, flag);

  if (flag) {
    let seq = await getAccountSequence(account);
    tx.setSequence(seq);
    tx.setSecret(_options.wallet.secret);
    tx.sign(emptyCallback);

    await rpcSubmit(tx);
  
    return;
  }
  
  await  _buildMultiSign(tx);
}

if (program.disable_secret) {
  disableSecret(true);
  return;
}
if (program.enable_secret) {
  if (!program.sign_for) {
    console.log("We must enable master secret by multi sign");
    return;
  }

  disableSecret(false);
  return;
}
